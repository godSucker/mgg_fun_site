<script>
  // ====== ВХОДНЫЕ ДАННЫЕ ОТ СТРАНИЦЫ ======
  /** @type {Array<any>} */
  export let items = [];
  /** @type {string} - нормал/bronze/silver/gold/platinum (для плашки редкости) */
  export let star = '';
  /** @type {string} */
  export let title = '';

  // ====== СЛОВАРИ ======
  const GENE_RU = {
    A: 'Киборг', B: 'Нежить', C: 'Рубака', D: 'Зверь', E: 'Галактик', F: 'Мифик'
  };

  // Бинго: базовый словарь + graceful fallback.
  const BINGO_RU = {
    hp: 'ХП', health: 'ХП',
    atk: 'Атака', attack: 'Атака', attack1: 'Атака 1', attack2: 'Атака 2',
    spd: 'Скорость', speed: 'Скорость',
    credit: 'Кредиты', credits: 'Кредиты',
    xp: 'Опыт',
    gene_A: 'Киборг', gene_B: 'Нежить', gene_C: 'Рубака', gene_D: 'Зверь', gene_E: 'Галактик', gene_F: 'Мифик'
  };

  // Цвета/стили для плашек редкости (Tailwind v3-safe)
  const STAR_STYLE = {
    bronze:  { bg: 'bg-amber-700',   ring: 'ring-amber-400',   text: 'Бронза' },
    silver:  { bg: 'bg-slate-400',   ring: 'ring-slate-200',   text: 'Серебро' },
    gold:    { bg: 'bg-yellow-500',  ring: 'ring-yellow-300',  text: 'Золото' },
    platinum:{ bg: 'bg-cyan-500',    ring: 'ring-cyan-200',    text: 'Платина' }
  };

  // ====== ВСПОМОГАТЕЛЬНЫЕ ======
  function humanizeGenes(genes) {
    // В JSON это массив из одной строки, например ["AB"] или ["A"].
    if (!Array.isArray(genes) || genes.length === 0 || typeof genes[0] !== 'string') return '';
    const g = genes[0].toUpperCase();
    // Комбинации типа "AB" -> "Киборг+Нежить", "AA" -> "Киборг+Киборг"
    return g.split('').map((ch) => GENE_RU[ch] || ch).join('+');
  }

  function ruBingoKey(key) {
    if (!key) return '';
    const k = String(key).toLowerCase();
    return BINGO_RU[k] || key;
  }

  function safeNum(n) {
    const v = Number(n);
    return Number.isFinite(v) ? v : undefined;
  }

  // Вытащить lvl1 статы (для фильтров; ты просил именно базовые)
  function statAtLvl1(item, key) {
    const lvl1 = item?.base_stats?.lvl1 || {};
    if (key === 'hp') return safeNum(lvl1.hp);
    if (key === 'atk') return safeNum(lvl1.atk1); // используем атаку 1 как опорную
    if (key === 'spd') return safeNum(lvl1.spd);
    return undefined;
  }

  // Надёжно выбрать полноразмерную текстуру из массива image.
  // Берём первый путь, который НЕ содержит 'specimen' и 'larva'.
  function pickFullTexture(item) {
    const raw = item?.image;
    let imgs = [];
    if (Array.isArray(raw)) imgs = raw;
    else if (typeof raw === 'string' && raw) imgs = [raw];

    const chosen = imgs.find(
      (p) => typeof p === 'string'
        && p.toLowerCase().indexOf('specimen') === -1
        && p.toLowerCase().indexOf('larva') === -1
        && p.toLowerCase().endsWith('.png')
    ) || imgs.find((p) => typeof p === 'string') || '';

    // В JSON путь уже корректный (пример: "textures_by_mutant/a_01/A_01_bronze.png"),
    // поэтому NOP. Оставляю replace лишь как страховку от лишних слэшей/пробелов.
    return String(chosen).replace(/\s+/g, ' ').trim();
  }

  /**
   * Определяет тип звёздной редкости для мутанта.
   * В JSON по звёздам лежит star: 'bronze'/'silver'/'gold'/'platinum' (или пусто у normal).
   * Если страница типовая (normal/bronze/... передаёт star пропом), используем star || item.star.
   * Возвращает строку типа ('bronze', 'silver', 'gold', 'platinum') либо 'normal'.
   */
  function rarityType(item) {
    const s = (star || item?.star || 'normal').toLowerCase();
    // Явно перечисляем допустимые звёздные версии
    return ['bronze','silver','gold','platinum'].includes(s) ? s : 'normal';
  }

  /**
   * Возвращает объект стиля для звёздной плашки.
   * Для нормальной версии возвращает undefined, чтобы ничего не рисовать.
   */
  function rarityFor(item) {
    const type = rarityType(item);
    if (type === 'normal') return undefined;
    return STAR_STYLE[type];
  }

  /**
   * Путь к иконке звёздной редкости. Если тип normal, возвращает пустую строку.
   */
  function rarityIconPath(item) {
    const type = rarityType(item);
    if (type === 'normal') return '';
    // Иконки лежат в папке public/stars/, например star_bronze.png
    return `/stars/star_${type}.png`;
  }

  // ====== UI СОСТОЯНИЕ (ФИЛЬТРЫ) ======
  let query = '';          // поиск по имени
  let geneSel = '';        // фильтр по гену (значение как в JSON: 'A','AB','F' и т.д.)
  let bingoSel = '';       // фильтр по бинго (строка ключа, как в JSON)
  let minHP = '', maxHP = '';
  let minATK = '', maxATK = '';
  let minSPD = '', maxSPD = '';

  // Списки значений для селектов — собираем из данных
  const geneOptions = Array.from(new Set(
    items
      .map(it => (Array.isArray(it.genes) && typeof it.genes[0] === 'string') ? it.genes[0].toUpperCase() : '')
      .filter(Boolean)
  )).sort();

  const bingoOptions = Array.from(new Set(
    items.flatMap(it => Array.isArray(it.bingo) ? it.bingo.map(String) : [])
  )).sort((a, b) => ruBingoKey(a).localeCompare(ruBingoKey(b), 'ru'));

  // ====== ФИЛЬТРАЦИЯ ======
  function passName(it) {
    if (!query) return true;
    return String(it.name || '').toLowerCase().includes(query.toLowerCase());
  }
  function passGene(it) {
    if (!geneSel) return true;
    const g = Array.isArray(it.genes) && typeof it.genes[0] === 'string' ? it.genes[0].toUpperCase() : '';
    return g === geneSel;
  }
  function passBingo(it) {
    if (!bingoSel) return true;
    const arr = Array.isArray(it.bingo) ? it.bingo.map(String) : [];
    return arr.some(x => String(x) === bingoSel);
  }
  function passRange(it, key, minV, maxV) {
    const v = statAtLvl1(it, key);
    if (v === undefined) return false; // нет стат — не показываем
    const minOk = (minV === '' || minV === undefined) ? true : v >= Number(minV);
    const maxOk = (maxV === '' || maxV === undefined) ? true : v <= Number(maxV);
    return minOk && maxOk;
  }

  $: filtered = items
    .filter(passName)
    .filter(passGene)
    .filter(passBingo)
    .filter(it => passRange(it, 'spd', minSPD, maxSPD))
    .filter(it => passRange(it, 'hp',  minHP,  maxHP))
    .filter(it => passRange(it, 'atk', minATK, maxATK))
    // По умолчанию — сортируем по имени для стабильности
    .sort((a, b) => String(a.name || '').localeCompare(String(b.name || ''), 'ru'));

  // ====== МОДАЛКА ======
  let openItem = null;
  function openModal(it) { openItem = it; }
  function closeModal() { openItem = null; }
</script>

<!-- ====== ЛЕЙАУТ ====== -->
<div class="mx-auto max-w-[1400px] px-4 py-6">
  {#if title}
    <h1 class="text-2xl md:text-3xl font-bold text-slate-100 mb-4">{title}</h1>
  {/if}

  <!-- Панель фильтров -->
  <div class="grid grid-cols-1 md:grid-cols-12 gap-4 mb-6">
    <div class="md:col-span-6 lg:col-span-7 p-4 rounded-xl bg-slate-800 bg-opacity-80 ring-1 ring-white/10">
      <div class="grid grid-cols-1 sm:grid-cols-3 gap-3">
        <!-- Поиск по имени -->
        <label class="flex flex-col gap-1">
          <span class="text-xs text-slate-300">Поиск по имени</span>
          <input
            class="px-3 py-2 rounded-lg bg-slate-900 text-slate-100 placeholder-slate-400 ring-1 ring-white/10 focus:outline-none focus:ring-2 focus:ring-cyan-400"
            placeholder="Введите имя мутанта…"
            bind:value={query}
          />
        </label>

        <!-- Ген -->
        <label class="flex flex-col gap-1">
          <span class="text-xs text-slate-300">Ген</span>
          <select
            class="px-3 py-2 rounded-lg bg-slate-900 text-slate-100 ring-1 ring-white/10 focus:outline-none focus:ring-2 focus:ring-cyan-400"
            bind:value={geneSel}
          >
            <option value=''>Любой</option>
            {#each geneOptions as g}
              <option value={g}>{humanizeGenes([g])}</option>
            {/each}
          </select>
        </label>

        <!-- Бинго -->
        <label class="flex flex-col gap-1">
          <span class="text-xs text-slate-300">Бинго</span>
          <select
            class="px-3 py-2 rounded-lg bg-slate-900 text-slate-100 ring-1 ring-white/10 focus:outline-none focus:ring-2 focus:ring-cyan-400"
            bind:value={bingoSel}
          >
            <option value=''>Любое</option>
            {#each bingoOptions as b}
              <option value={b}>{ruBingoKey(b)}</option>
            {/each}
          </select>
        </label>
      </div>
    </div>

    <!-- Диапазоны статов -->
    <div class="md:col-span-6 lg:col-span-5 p-4 rounded-xl bg-slate-800 bg-opacity-80 ring-1 ring-white/10">
      <div class="grid grid-cols-2 md:grid-cols-6 gap-3">
        <!-- Скорость -->
        <div class="col-span-2 md:col-span-2">
          <div class="text-xs text-slate-300 mb-1">Скорость</div>
          <div class="flex gap-2">
            <input class="w-full px-3 py-2 rounded-lg bg-slate-900 text-slate-100 ring-1 ring-white/10"
                   type="number" step="0.001" placeholder="Мин" bind:value={minSPD} />
            <input class="w-full px-3 py-2 rounded-lg bg-slate-900 text-slate-100 ring-1 ring-white/10"
                   type="number" step="0.001" placeholder="Макс" bind:value={maxSPD} />
          </div>
        </div>

        <!-- ХП -->
        <div class="col-span-1 md:col-span-2">
          <div class="text-xs text-slate-300 mb-1">ХП</div>
          <div class="flex gap-2">
            <input class="w-full px-3 py-2 rounded-lg bg-slate-900 text-slate-100 ring-1 ring-white/10"
                   type="number" step="1" placeholder="Мин" bind:value={minHP} />
            <input class="w-full px-3 py-2 rounded-lg bg-slate-900 text-slate-100 ring-1 ring-white/10"
                   type="number" step="1" placeholder="Макс" bind:value={maxHP} />
          </div>
        </div>

        <!-- Атака -->
        <div class="col-span-1 md:col-span-2">
          <div class="text-xs text-slate-300 mb-1">Атака (Atk1)</div>
          <div class="flex gap-2">
            <input class="w-full px-3 py-2 rounded-lg bg-slate-900 text-slate-100 ring-1 ring-white/10"
                   type="number" step="1" placeholder="Мин" bind:value={minATK} />
            <input class="w-full px-3 py-2 rounded-lg bg-slate-900 text-slate-100 ring-1 ring-white/10"
                   type="number" step="1" placeholder="Макс" bind:value={maxATK} />
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Сетка карточек -->
  <div class="grid gap-4
              grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-7">
    {#each filtered as it (it.id)}
      {#key it.id}
        <div
          class="group relative rounded-xl overflow-hidden
                 bg-slate-800 ring-1 ring-white/10
                 transition-transform duration-200 ease-out
                 cursor-pointer"
          on:click={() => openModal(it)}
          style="transform: perspective(900px) translateZ(0)"
          on:mousemove={(e) => {
            const card = e.currentTarget;
            const r = card.getBoundingClientRect();
            const dx = e.clientX - (r.left + r.width/2);
            const dy = e.clientY - (r.top + r.height/2);
            const tiltX = (+dy / r.height) * -6; // лёгкий «прогиб»
            const tiltY = (+dx / r.width) * 6;
            card.style.transform = `perspective(900px) rotateX(${tiltX}deg) rotateY(${tiltY}deg) scale(1.01)`;
          }}
          on:mouseleave={(e) => {
            e.currentTarget.style.transform = 'perspective(900px) rotateX(0) rotateY(0) scale(1)';
          }}
        >
          <!-- Текстура -->
          <img
            alt={it.name}
            class="w-full h-48 object-contain bg-slate-900"
            src={'/' + pickFullTexture(it)}
            loading="lazy"
            on:error={(ev) => { ev.currentTarget.classList.add('opacity-0'); }}
            on:load={(ev) => { ev.currentTarget.classList.remove('opacity-0'); }}
          />

          <!-- Плашки -->
          <div class="absolute left-0 top-0 m-2 flex gap-2 items-center">
            <!-- Плашка редкости: для звёздных версий выводим иконку звезды -->
            {#if rarityIconPath(it)}
              <img
                src={rarityIconPath(it)}
                alt="звёздная редкость"
                class="h-5 w-5 md:h-6 md:w-6 object-contain"
              />
            {/if}

            <!-- Плашка тира (не показываем для un-tired) -->
            {#if it.tier && it.tier !== 'un-tired'}
              <!-- делаем цвет менее ярким и более мягким -->
              <span class="px-2 py-0.5 text-[11px] font-semibold rounded-md bg-slate-700 bg-opacity-70 ring-1 ring-slate-500 text-slate-100">
                {it.tier}
              </span>
            {/if}
          </div>

          <!-- Имя -->
          <div class="px-3 pt-2 pb-3">
            <div class="relative">
              {#if (String(it.name || '').length > 10)}
                <div class="overflow-hidden">
                  <div class="whitespace-nowrap text-slate-100 font-semibold text-sm animate-marquee">
                    {it.name}
                  </div>
                </div>
              {:else}
                <div class="text-slate-100 font-semibold text-sm truncate">
                  {it.name}
                </div>
              {/if}
            </div>
          </div>
        </div>
      {/key}
    {/each}
  </div>

  <!-- Модалка -->
  {#if openItem}
    <div class="fixed inset-0 z-50 flex items-center justify-center">
      <div class="absolute inset-0 bg-black bg-opacity-60" on:click={closeModal}></div>

      <div class="relative z-10 w-[min(1000px,95vw)] max-h-[90vh] overflow-y-auto overflow-x-hidden
                  bg-slate-900 text-slate-100 rounded-2xl ring-1 ring-white/10 shadow-2xl">
        <button class="absolute right-3 top-3 px-3 py-1 rounded-md bg-slate-800 ring-1 ring-white/10 hover:bg-slate-700"
                on:click={closeModal}>✕</button>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-0">
          <!-- Картинка -->
          <div class="p-4 flex items-center justify-center bg-slate-950">
            <img class="max-h-[70vh] object-contain" src={'/' + pickFullTexture(openItem)} alt={openItem.name} />
          </div>

          <!-- Характеристики -->
          <div class="p-6 overflow-y-auto">
            <h2 class="text-xl font-bold mb-2">{openItem.name}</h2>
            <div class="text-sm text-slate-300 mb-4">
              Ген: <span class="text-slate-100 font-medium">{humanizeGenes(openItem.genes)}</span>
            </div>

            <div class="grid grid-cols-2 gap-3 mb-4">
              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">Скорость</div>
                <div class="text-lg font-semibold">{statAtLvl1(openItem, 'spd') ?? '—'}</div>
              </div>
              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">ХП (1 ур.)</div>
                <div class="text-lg font-semibold">{openItem?.base_stats?.lvl1?.hp ?? '—'}</div>
              </div>
              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">Атака1 (1 ур.)</div>
                <div class="text-lg font-semibold">{openItem?.base_stats?.lvl1?.atk1 ?? '—'}</div>
              </div>
              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">Атака2 (1 ур.)</div>
                <div class="text-lg font-semibold">{openItem?.base_stats?.lvl1?.atk2 ?? '—'}</div>
              </div>

              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">ХП (30 ур.)</div>
                <div class="text-lg font-semibold">{openItem?.base_stats?.lvl30?.hp ?? '—'}</div>
              </div>
              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">Атака1 (30 ур.)</div>
                <div class="text-lg font-semibold">{openItem?.base_stats?.lvl30?.atk1 ?? '—'}</div>
              </div>
              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">Атака2 (30 ур.)</div>
                <div class="text-lg font-semibold">{openItem?.base_stats?.lvl30?.atk2 ?? '—'}</div>
              </div>

              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">Инкубация (мин)</div>
                <div class="text-lg font-semibold">{openItem?.incub_time ?? '—'}</div>
              </div>
              <div class="rounded-lg bg-slate-800 p-3 ring-1 ring-white/10">
                <div class="text-xs text-slate-400">Тип</div>
                <div class="text-lg font-semibold">{openItem?.type ?? '—'}</div>
              </div>
            </div>

            <!-- Бинго / способности -->
            <div class="mb-3">
              <div class="text-sm text-slate-300 mb-1">Бинго:</div>
              {#if Array.isArray(openItem.bingo) && openItem.bingo.length}
                <div class="flex flex-wrap gap-2">
                  {#each openItem.bingo as b}
                    <span class="text-xs px-2 py-1 rounded-md bg-slate-800 ring-1 ring-white/10">{ruBingoKey(b)}</span>
                  {/each}
                </div>
              {:else}
                <div class="text-slate-500 text-sm">—</div>
              {/if}
            </div>

            <div class="mb-3">
              <div class="text-sm text-slate-300 mb-1">Способности:</div>
              {#if Array.isArray(openItem.abilities) && openItem.abilities.length}
                <div class="space-y-1">
                  {#each openItem.abilities as ab}
                    <div class="text-xs bg-slate-800 ring-1 ring-white/10 rounded-md px-2 py-1">
                      <span class="font-semibold">{ab.name}</span>
                      <span class="text-slate-400"> — {ab.pct ?? '?'}%</span>
                    </div>
                  {/each}
                </div>
              {:else}
                <div class="text-slate-500 text-sm">—</div>
              {/if}
            </div>

            <!-- Описание — резерв -->
            <div class="mt-4 text-sm text-slate-300">
              <div class="mb-1">Описание:</div>
              <div class="text-slate-400">Скоро здесь будет лор мутанта.</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  {/if}
</div>

<style>
   /* Мягкий «прогиб» карточки под курсор сохраняется — если у тебя свой класс, оставляй его */
  .card {
    transform-style: preserve-3d;
    transition: transform .2s ease, box-shadow .2s ease;
  }
  .card:hover {
    transform: perspective(900px) rotateX(3deg) rotateY(-3deg) translateZ(2px);
    box-shadow: 0 12px 30px rgba(0,0,0,.35);
  }

  /* Бегущая строка */
  @keyframes marquee {
    0% { transform: translateX(0); }
    100% { transform: translateX(-50%); } /* т.к. дублируем текст */
  }
  .animate-marquee {
    animation: marquee 8s linear infinite;
  }
</style>
