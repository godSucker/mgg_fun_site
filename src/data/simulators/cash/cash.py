import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import random
from collections import defaultdict

# –î–∞–Ω–Ω—ã–µ –∏–∑ XML
machine_data = '''
<Machine id="cash" cost="20" costToken="0">
<MachineReward rewardId="1" amount="1" odds="1" type="entity" id="" picture="thumbnails/jackpot.png" isBigwin="true" isSuperJackpot="true"/>
<MachineReward rewardId="2" amount="30" odds="42000" type="hardcurrency" picture="thumbnails/jackpot_gold_x30.png"/>
<MachineReward rewardId="3" amount="40" odds="22000" type="hardcurrency" picture="thumbnails/jackpot_gold_x40.png"/>
<MachineReward rewardId="4" amount="50" odds="10400" type="hardcurrency" picture="thumbnails/jackpot_gold_x50.png"/>
<MachineReward rewardId="5" amount="80" odds="3900" type="hardcurrency" picture="thumbnails/jackpot_gold_x80.png"/>
<MachineReward rewardId="6" amount="100" odds="1300" type="hardcurrency" picture="thumbnails/jackpot_gold_x100.png"/>
<MachineReward rewardId="7" amount="200" odds="500" type="hardcurrency" picture="thumbnails/jackpot_gold_x200.png"/>
<MachineReward rewardId="8" amount="500" odds="170" type="hardcurrency" picture="thumbnails/jackpot_gold_x500.png"/>
<MachineReward rewardId="9" amount="1000" odds="75" type="hardcurrency" picture="thumbnails/jackpot_gold_x1000.png"/>
<MachineReward rewardId="10" amount="2000" odds="40" type="hardcurrency" picture="thumbnails/jackpot_gold_x2000.png"/>
<MachineReward rewardId="11" amount="5000" odds="10" type="hardcurrency" picture="thumbnails/jackpot_gold_x5000.png"/>
<MachineReward rewardId="12" amount="50000" odds="270000" type="softcurrency" picture="thumbnails/sc10000.png"/>
</Machine>
'''


# –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
def parse_machine_data(xml_data):
    rewards = []
    lines = xml_data.strip().split('\n')

    for line in lines:
        if '<MachineReward' in line:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            attrs = {}
            parts = line.split('"')
            for i in range(0, len(parts) - 1, 2):
                if parts[i].endswith('='):
                    key = parts[i].strip().replace('=', '').replace('<', '').replace('MachineReward', '').strip()
                    value = parts[i + 1].strip()
                    attrs[key] = value

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞–≥—Ä–∞–¥—ã
            reward = {
                'rewardId': attrs.get('rewardId', ''),
                'amount': attrs.get('amount', ''),
                'odds': attrs.get('odds', ''),
                'type': attrs.get('type', ''),
                'id': attrs.get('id', ''),
                'picture': attrs.get('picture', ''),
                'isBigwin': attrs.get('isBigwin', 'false'),
                'isSuperJackpot': attrs.get('isSuperJackpot', 'false')
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if reward['type'] == 'entity' and 'jackpot' in reward['picture']:
                reward['name'] = '–î–∂–µ–∫–ø–æ—Ç'
            elif reward['type'] == 'hardcurrency':
                reward['name'] = f"{reward['amount']} –∑–æ–ª–æ—Ç–∞"
            elif reward['type'] == 'softcurrency':
                reward['name'] = f"{reward['amount']} —Å–µ—Ä–µ–±—Ä–∞"
            else:
                reward['name'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞'

            rewards.append(reward)

    return rewards


rewards = parse_machine_data(machine_data)


class CashMachineSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("üé∞ –°–ò–ú–£–õ–Ø–¢–û–† CASH MACHINE")
        self.root.geometry("1000x700")
        self.root.configure(bg='#2c3e50')

        # –°—Ç–∏–ª–∏
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.configure_styles()

        # –î–∞–Ω–Ω—ã–µ
        self.rewards = rewards
        self.valid_rewards = [r for r in self.rewards if int(r['odds']) > 0]
        self.total_weight = sum(int(reward['odds']) for reward in self.valid_rewards)
        self.cost_per_spin = 20  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–∞ –≤ –∑–æ–ª–æ—Ç–µ

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_spins = 0
        self.total_gold_spent = 0
        self.win_counts = {reward['rewardId']: 0 for reward in self.rewards}
        self.results_history = []
        self.resource_totals = defaultdict(int)
        self.reward_counts = defaultdict(int)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∞–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–π –Ω–∞–≥—Ä–∞–¥—ã

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()

    def configure_styles(self):
        self.style.configure('TFrame', background='#2c3e50')
        self.style.configure('TLabel', background='#2c3e50', foreground='white', font=('Arial', 10))
        self.style.configure('TButton', background='#3498db', foreground='white', font=('Arial', 10, 'bold'))
        self.style.configure('TEntry', fieldbackground='#ecf0f1', font=('Arial', 10))
        self.style.configure('Header.TLabel', background='#34495e', foreground='white',
                             font=('Arial', 14, 'bold'))
        self.style.configure('Big.TLabel', font=('Arial', 12, 'bold'))
        self.style.configure('Highlight.TLabel', background='#1abc9c', foreground='white',
                             font=('Arial', 11, 'bold'))

    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.pack(fill='both', expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(main_frame, text="üé∞ –°–ò–ú–£–õ–Ø–¢–û–† CASH MACHINE",
                           style='Header.TLabel')
        header.pack(pady=(0, 15))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        info_label = ttk.Label(main_frame, text=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–∞: {self.cost_per_spin} –∑–æ–ª–æ—Ç–∞",
                               style='Big.TLabel')
        info_label.pack(pady=(0, 10))

        # –§—Ä–µ–π–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill='x', pady=10)

        ttk.Label(control_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏:", style='Big.TLabel').pack(side=tk.LEFT, padx=5)

        self.gold_amount = tk.IntVar(value=1000)
        gold_entry = ttk.Entry(control_frame, textvariable=self.gold_amount, width=15)
        gold_entry.pack(side=tk.LEFT, padx=5)

        self.simulate_btn = ttk.Button(control_frame, text="üé≤ –ó–ê–ü–£–°–¢–ò–¢–¨ –°–ò–ú–£–õ–Ø–¶–ò–Æ",
                                       command=self.run_simulation)
        self.simulate_btn.pack(side=tk.LEFT, padx=10)

        self.clear_btn = ttk.Button(control_frame, text="üóëÔ∏è –û–ß–ò–°–¢–ò–¢–¨ –í–°–Å",
                                    command=self.clear_history)
        self.clear_btn.pack(side=tk.LEFT, padx=5)

        # –§—Ä–µ–π–º —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill='both', expand=True, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_frame = ttk.Frame(notebook)
        notebook.add(results_frame, text="üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")

        self.results_text = scrolledtext.ScrolledText(results_frame, height=15, width=80,
                                                      font=('Consolas', 10))
        self.results_text.pack(fill='both', expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ —à–∞–Ω—Å–æ–≤
        odds_frame = ttk.Frame(notebook)
        notebook.add(odds_frame, text="üéØ –®–ê–ù–°–´")

        self.odds_text = scrolledtext.ScrolledText(odds_frame, height=15, width=80,
                                                   font=('Consolas', 10))
        self.odds_text.pack(fill='both', expand=True, padx=10, pady=10)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∫–ª–∞–¥–∫—É —à–∞–Ω—Å–æ–≤
        self.display_odds()

    def display_odds(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è"""
        text = "üéØ –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –®–ê–ù–°–´ –í–´–ü–ê–î–ï–ù–ò–Ø:\n"
        text += "=" * 60 + "\n\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ —à–∞–Ω—Å–∞–º (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_rewards = sorted(self.valid_rewards, key=lambda x: int(x['odds']), reverse=True)

        for reward in sorted_rewards:
            chance = (int(reward['odds']) / self.total_weight) * 100
            text += f"{reward['name']}: {chance:.6f}%\n"

        text += f"\n–°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å: {self.total_weight:,}\n".replace(",", " ")
        text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∞: {self.cost_per_spin} –∑–æ–ª–æ—Ç–∞\n"

        self.odds_text.insert(tk.END, text)
        self.odds_text.configure(state='disabled')

    def spin(self):
        """–û–¥–∏–Ω –ø—Ä–æ–∫—Ä—É—Ç –º–∞—à–∏–Ω—ã"""
        r = random.randint(1, self.total_weight)
        current_weight = 0

        for reward in self.valid_rewards:
            current_weight += int(reward['odds'])
            if current_weight >= r:
                return reward
        return None

    def run_simulation(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        gold_to_spend = self.gold_amount.get()
        if gold_to_spend <= 0:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤
        max_spins = gold_to_spend // self.cost_per_spin
        if max_spins <= 0:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {self.cost_per_spin} –∑–æ–ª–æ—Ç–∞.")
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        self.simulate_btn.configure(state='disabled')
        self.root.update()

        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.total_spins = 0
            self.total_gold_spent = 0
            self.win_counts = {reward['rewardId']: 0 for reward in self.rewards}
            self.results_history = []
            self.resource_totals = defaultdict(int)
            self.reward_counts = defaultdict(int)

            results_text = f"üöÄ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò –ù–ê {gold_to_spend} –ó–û–õ–û–¢–ê\n"
            results_text += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤: {max_spins}\n"
            results_text += "=" * 60 + "\n\n"
            self.update_results_display(results_text)

            # –°–∏–º—É–ª—è—Ü–∏—è
            spins_done = 0
            gold_remaining = gold_to_spend

            while gold_remaining >= self.cost_per_spin:
                # –¢—Ä–∞—Ç–∏–º –∑–æ–ª–æ—Ç–æ
                gold_remaining -= self.cost_per_spin
                self.total_gold_spent += self.cost_per_spin
                spins_done += 1
                self.total_spins += 1

                # –ö—Ä—É—Ç–∏–º –º–∞—à–∏–Ω—É
                won_reward = self.spin()

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
                self.win_counts[won_reward['rewardId']] += 1
                amount = int(won_reward['amount'])

                # –°—É–º–º–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∞–¥–µ–Ω–∏–π
                reward_name = won_reward['name']
                self.resource_totals[reward_name] += amount  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è 50 –∫–∞–∂–¥—ã–π —Ä–∞–∑
                self.reward_counts[reward_name] += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤
                if self.total_spins % 50 == 0:
                    self.update_results_display("")
                    self.root.update()

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.update_results_display("")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            results_text = f"\n‚úÖ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n"
            results_text += f"–í—Å–µ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤: {self.total_spins}\n"
            results_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–æ–ª–æ—Ç–∞: {self.total_gold_spent}\n"
            results_text += f"–û—Å—Ç–∞–ª–æ—Å—å –∑–æ–ª–æ—Ç–∞: {gold_remaining}\n\n"

            # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
            total_gold_won = 0
            total_silver_won = 0

            for reward_name, amount in self.resource_totals.items():
                if '–∑–æ–ª–æ—Ç–∞' in reward_name:
                    total_gold_won += amount
                elif '—Å–µ—Ä–µ–±—Ä–∞' in reward_name:
                    total_silver_won += amount

            results_text += f"–í—ã–∏–≥—Ä–∞–Ω–æ –∑–æ–ª–æ—Ç–∞: {total_gold_won}\n"
            results_text += f"–í—ã–∏–≥—Ä–∞–Ω–æ —Å–µ—Ä–µ–±—Ä–∞: {total_silver_won}\n"
            results_text += f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –ø–æ –∑–æ–ª–æ—Ç—É: {total_gold_won - self.total_gold_spent}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–ø–∞–¥–µ–Ω–∏—è–º
            results_text += f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–´–ü–ê–î–ï–ù–ò–ô:\n"
            results_text += "-" * 40 + "\n"

            for reward_name, count in sorted(self.reward_counts.items(), key=lambda x: x[1], reverse=True):
                total_amount = self.resource_totals[reward_name]
                results_text += f"{reward_name} (x{count}) - –≤—Å–µ–≥–æ: {total_amount}\n"

            self.results_text.insert(tk.END, results_text)
            self.results_text.see(tk.END)

        finally:
            self.simulate_btn.configure(state='normal')

    def update_results_display(self, initial_text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.results_text.configure(state='normal')

        if initial_text:
            self.results_text.delete(1.0, tk.END)
            self.results_text.insert(tk.END, initial_text)
            self.initial_results_text = initial_text
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            scroll_position = self.results_text.yview()
            self.results_text.delete(1.0, tk.END)

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(self, 'initial_results_text') and self.initial_results_text:
                self.results_text.insert(tk.END, self.initial_results_text)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        results_text = "\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò:\n"
        results_text += "=" * 40 + "\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –Ω–∞–≥—Ä–∞–¥
        gold_rewards = {}
        silver_rewards = {}
        other_rewards = {}

        for reward_name, count in self.reward_counts.items():
            total_amount = self.resource_totals[reward_name]
            if '–∑–æ–ª–æ—Ç–∞' in reward_name:
                gold_rewards[reward_name] = (count, total_amount)
            elif '—Å–µ—Ä–µ–±—Ä–∞' in reward_name:
                silver_rewards[reward_name] = (count, total_amount)
            else:
                other_rewards[reward_name] = (count, total_amount)

        # –í—ã–≤–æ–¥–∏–º –∑–æ–ª–æ—Ç–æ
        if gold_rewards:
            results_text += "\nü•á –ó–û–õ–û–¢–û:\n"
            for reward_name, (count, total_amount) in sorted(gold_rewards.items()):
                results_text += f"  {reward_name} (x{count}) - –≤—Å–µ–≥–æ: {total_amount}\n"

        # –í—ã–≤–æ–¥–∏–º —Å–µ—Ä–µ–±—Ä–æ
        if silver_rewards:
            results_text += "\nü•à –°–ï–†–ï–ë–†–û:\n"
            for reward_name, (count, total_amount) in sorted(silver_rewards.items()):
                results_text += f"  {reward_name} (x{count}) - –≤—Å–µ–≥–æ: {total_amount}\n"

        # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        if other_rewards:
            results_text += "\nüéÅ –î–†–£–ì–û–ï:\n"
            for reward_name, (count, total_amount) in sorted(other_rewards.items()):
                results_text += f"  {reward_name} (x{count}) - –≤—Å–µ–≥–æ: {total_amount}\n"

        self.results_text.insert(tk.END, results_text)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        total_gold_won = 0
        total_silver_won = 0

        for reward_name, amount in self.resource_totals.items():
            if '–∑–æ–ª–æ—Ç–∞' in reward_name:
                total_gold_won += amount
            elif '—Å–µ—Ä–µ–±—Ä–∞' in reward_name:
                total_silver_won += amount

        progress = f"\nüìä –ü–†–û–ì–†–ï–°–°: {self.total_spins} –ø—Ä–æ–∫—Ä—É—Ç–æ–≤"
        progress += f" | üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {self.total_gold_spent} –∑–æ–ª–æ—Ç–∞"
        progress += f" | ü•á –í—ã–∏–≥—Ä–∞–Ω–æ –∑–æ–ª–æ—Ç–∞: {total_gold_won}"
        progress += f" | ü•à –í—ã–∏–≥—Ä–∞–Ω–æ —Å–µ—Ä–µ–±—Ä–∞: {total_silver_won}"
        self.results_text.insert(tk.END, progress + "\n")

        self.results_text.configure(state='disabled')
        self.results_text.see(tk.END)

    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"""
        self.results_text.configure(state='normal')
        self.results_text.delete(1.0, tk.END)
        self.results_text.configure(state='disabled')

        self.odds_text.configure(state='normal')
        self.odds_text.delete(1.0, tk.END)
        self.odds_text.configure(state='disabled')
        self.display_odds()  # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º —à–∞–Ω—Å—ã

        self.results_history = []
        self.resource_totals = defaultdict(int)
        self.reward_counts = defaultdict(int)


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = CashMachineSimulator(root)
    root.mainloop()