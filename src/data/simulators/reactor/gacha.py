import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import random
from collections import defaultdict
import xml.etree.ElementTree as ET
import json


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
def parse_gacha_data(xml_content):
    root = ET.fromstring(xml_content)
    gachas = {}

    for gacha_elem in root.findall('Gacha'):
        gacha_id = gacha_elem.get('id')
        token_cost = int(gacha_elem.get('tokenCost', 0))
        hc_cost = int(gacha_elem.get('hcCost', 0))
        filter_name = gacha_elem.get('filter', '')

        basic_elements = []
        for specimen_elem in gacha_elem.find('BasicElements').findall('GachaSpecimen'):
            specimen_id = specimen_elem.get('specimen')
            stars = int(specimen_elem.get('stars', 0))
            odds = int(specimen_elem.get('odds', 0))
            bonus = int(specimen_elem.get('bonus', 0))
            basic_elements.append({
                'specimen': specimen_id,
                'stars': stars,
                'odds': odds,
                'bonus': bonus
            })

        completion_reward = None
        completion_elem = gacha_elem.find('CompletionReward')
        if completion_elem is not None:
            specimen_elem = completion_elem.find('GachaSpecimen')
            if specimen_elem is not None:
                completion_reward = {
                    'specimen': specimen_elem.get('specimen'),
                    'stars': int(specimen_elem.get('stars', 0)),
                    'odds': int(specimen_elem.get('odds', 0)),
                    'bonus': int(specimen_elem.get('bonus', 0))
                }

        gachas[gacha_id] = {
            'token_cost': token_cost,
            'hc_cost': hc_cost,
            'filter': filter_name,
            'basic_elements': basic_elements,
            'completion_reward': completion_reward
        }

    return gachas


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with open('gacha.txt', 'r', encoding='utf-8') as f:
    gacha_xml_content = f.read()

with open('mutant_names (2).json', 'r', encoding='utf-8') as f:
    mutant_names = json.load(f)

gacha_data = parse_gacha_data(gacha_xml_content)

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
gacha_names_ru = {
    'western': 'Western',
    'gachaboss': '–ë–æ–ª—å—à–æ–π –±–æ—Å—Å',
    'japan': '–Ø–ø–æ–Ω–∏—è',
    'fantasy': '–¢–µ–º–Ω–æ–µ —Ñ–µ–Ω—Ç–µ–∑–∏',
    'lucha': '–ú—É—á–∞—á–æ\'—Å',
    'olympians': '–ë–æ–≥–∏ –∞—Ä–µ–Ω—ã',
    'music': '–î–∏—Å–∫–æ',
    'villains': '–°—É–ø–µ—Ä –∑–ª–æ–¥–µ–∏',
    'starwars': '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –≤–æ–π–Ω—ã',
    'beach': '–¢—Ä–æ–ø–∏—á–µ—Å–∫–æ–µ –ª–µ—Ç–æ',
    'heroes': '–°—É–ø–µ—Ä–≥–µ—Ä–æ–∏',
    'soldiers': '–ü–∞—Ç—Ä—É–ª—å –≤—Ä–µ–º–µ–Ω–∏',
    'gothic': '–ì–æ—Ç–∏–∫–∞',
    'movies': '–ö–∏–Ω–æ',
    'elements': '–ö–æ–º–∞–Ω–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–ª–µ–π',
    'steampunk': '–°—Ç–∏–º–ø–∞–Ω–∫',
    'vegetal': '–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑',
    'girl': '–•–∏—â–Ω–∏—Ü—ã',
    'olympics': '–ö—Ä–æ–≤–∞–≤—ã–µ –∏–≥—Ä—ã'
}

# –ù–∞–∑–≤–∞–Ω–∏—è –∑–≤–µ–∑–¥
star_names = {
    0: "",
    1: "–ë—Ä–æ–Ω–∑–æ–≤–∞—è –∑–≤–µ–∑–¥–∞",
    2: "–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –∑–≤–µ–∑–¥–∞",
    3: "–ó–æ–ª–æ—Ç–∞—è –∑–≤–µ–∑–¥–∞",
    4: "–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è –∑–≤–µ–∑–¥–∞"
}


class GachaSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("üé∞ –°–ò–ú–£–õ–Ø–¢–û–† –ì–ê–ß–ê-–ì–ï–ù–ï–†–ê–¢–û–†–û–í")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2c3e50')

        # –°—Ç–∏–ª–∏
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.configure_styles()

        # –î–∞–Ω–Ω—ã–µ
        self.gacha_data = gacha_data
        self.mutant_names = mutant_names
        self.current_gacha = None
        self.completion_status = {}  # –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_spins = 0
        self.total_tokens_spent = 0
        self.total_hc_spent = 0
        self.win_history = []
        self.mutant_counts = defaultdict(int)
        self.resource_stats = defaultdict(lambda: defaultdict(int))
        self.completion_history = []  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for gacha_id in self.gacha_data.keys():
            self.completion_status[gacha_id] = {
                'completed': False,
                'unlocked_specimens': set()
            }

    def configure_styles(self):
        self.style.configure('TFrame', background='#2c3e50')
        self.style.configure('TLabel', background='#2c3e50', foreground='white', font=('Arial', 10))
        self.style.configure('TButton', background='#3498db', foreground='white', font=('Arial', 10, 'bold'))
        self.style.configure('TCombobox', fieldbackground='#ecf0f1', font=('Arial', 10))
        self.style.configure('Header.TLabel', background='#34495e', foreground='white',
                             font=('Arial', 14, 'bold'))
        self.style.configure('Big.TLabel', font=('Arial', 12, 'bold'))
        self.style.configure('Highlight.TLabel', background='#1abc9c', foreground='white',
                             font=('Arial', 11, 'bold'))

    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.pack(fill='both', expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(main_frame, text="üé∞ –°–ò–ú–£–õ–Ø–¢–û–† –ì–ê–ß–ê-–ì–ï–ù–ï–†–ê–¢–û–†–û–í",
                           style='Header.TLabel')
        header.pack(pady=(0, 15))

        # –§—Ä–µ–π–º –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        gacha_frame = ttk.Frame(main_frame)
        gacha_frame.pack(fill='x', pady=10)

        ttk.Label(gacha_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:", style='Big.TLabel').pack(side=tk.LEFT, padx=5)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        gacha_options = []
        for gacha_id, ru_name in gacha_names_ru.items():
            if gacha_id in self.gacha_data:
                gacha_options.append(f"{ru_name} ({gacha_id})")

        self.gacha_var = tk.StringVar()
        self.gacha_combo = ttk.Combobox(gacha_frame, textvariable=self.gacha_var,
                                        values=gacha_options, width=30, state="readonly")
        self.gacha_combo.pack(side=tk.LEFT, padx=5)
        self.gacha_combo.bind('<<ComboboxSelected>>', self.on_gacha_select)

        # –ö–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
        self.info_btn = ttk.Button(gacha_frame, text="‚ÑπÔ∏è –ò–ù–§–û", command=self.show_gacha_info)
        self.info_btn.pack(side=tk.LEFT, padx=5)

        # –§—Ä–µ–π–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill='x', pady=10)

        ttk.Label(control_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤:", style='Big.TLabel').pack(side=tk.LEFT, padx=5)

        self.token_amount = tk.IntVar(value=100)
        token_entry = ttk.Entry(control_frame, textvariable=self.token_amount, width=10)
        token_entry.pack(side=tk.LEFT, padx=5)

        self.spin_token_btn = ttk.Button(control_frame, text="üé≤ –ö–†–£–¢–ò–¢–¨ –ó–ê –ñ–ï–¢–û–ù–´",
                                         command=lambda: self.run_simulation('token'))
        self.spin_token_btn.pack(side=tk.LEFT, padx=5)

        ttk.Label(control_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞:", style='Big.TLabel').pack(side=tk.LEFT, padx=5)

        self.hc_amount = tk.IntVar(value=1000)
        hc_entry = ttk.Entry(control_frame, textvariable=self.hc_amount, width=10)
        hc_entry.pack(side=tk.LEFT, padx=5)

        self.spin_hc_btn = ttk.Button(control_frame, text="üí∞ –ö–†–£–¢–ò–¢–¨ –ó–ê –ó–û–õ–û–¢–û",
                                      command=lambda: self.run_simulation('hc'))
        self.spin_hc_btn.pack(side=tk.LEFT, padx=5)

        self.clear_btn = ttk.Button(control_frame, text="üóëÔ∏è –û–ß–ò–°–¢–ò–¢–¨ –í–°–Å",
                                    command=self.clear_history)
        self.clear_btn.pack(side=tk.LEFT, padx=5)

        # –§—Ä–µ–π–º —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill='both', expand=True, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_frame = ttk.Frame(notebook)
        notebook.add(results_frame, text="üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")

        self.results_text = scrolledtext.ScrolledText(results_frame, height=20, width=100,
                                                      font=('Consolas', 9))
        self.results_text.pack(fill='both', expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = ttk.Frame(notebook)
        notebook.add(stats_frame, text="üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê")

        self.stats_text = scrolledtext.ScrolledText(stats_frame, height=20, width=100,
                                                    font=('Consolas', 9))
        self.stats_text.pack(fill='both', expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
        info_frame = ttk.Frame(notebook)
        notebook.add(info_frame, text="‚ÑπÔ∏è –ò–ù–§–û –û –ì–ï–ù–ï–†–ê–¢–û–†–ï")

        self.info_text = scrolledtext.ScrolledText(info_frame, height=20, width=100,
                                                   font=('Consolas', 9))
        self.info_text.pack(fill='both', expand=True, padx=10, pady=10)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.update_info_display()

    def get_current_gacha_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        selection = self.gacha_var.get()
        if selection and '(' in selection and ')' in selection:
            return selection.split('(')[1].replace(')', '').strip()
        return None

    def on_gacha_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.current_gacha = self.get_current_gacha_id()
        self.update_info_display()

    def show_gacha_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ"""
        self.update_info_display()

    def update_info_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ"""
        gacha_id = self.get_current_gacha_id()
        if not gacha_id or gacha_id not in self.gacha_data:
            self.info_text.configure(state='normal')
            self.info_text.delete(1.0, tk.END)
            self.info_text.insert(tk.END, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            self.info_text.configure(state='disabled')
            return

        gacha = self.gacha_data[gacha_id]
        ru_name = gacha_names_ru.get(gacha_id, gacha_id)

        self.info_text.configure(state='normal')
        self.info_text.delete(1.0, tk.END)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = f"üé∞ –ì–ï–ù–ï–†–ê–¢–û–†: {ru_name}\n"
        info_text += "=" * 50 + "\n\n"
        info_text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∂–µ—Ç–æ–Ω—ã: {gacha['token_cost']} –∂–µ—Ç–æ–Ω–æ–≤\n"
        info_text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∑–æ–ª–æ—Ç–æ: {gacha['hc_cost']} –∑–æ–ª–æ—Ç–∞\n\n"

        # –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        status = self.completion_status[gacha_id]
        completed = status['completed']
        unlocked_count = len(status['unlocked_specimens'])
        total_basic = len(gacha['basic_elements'])

        info_text += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–ê–í–ï–†–®–ï–ù–û' if completed else 'üö´ –ù–ï –ó–ê–í–ï–†–®–ï–ù–û'}\n"
        info_text += f"–û—Ç–∫—Ä—ã—Ç–æ –º—É—Ç–∞–Ω—Ç–æ–≤: {unlocked_count}/{total_basic}\n\n"

        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        info_text += "üéØ –û–°–ù–û–í–ù–´–ï –ù–ê–ì–†–ê–î–´:\n"
        info_text += "-" * 40 + "\n"

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —à–∞–Ω—Å—ã (–≤–∫–ª—é—á–∞—è –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω)
        total_odds = sum(item['odds'] for item in gacha['basic_elements'])
        if completed and gacha['completion_reward']:
            total_odds += gacha['completion_reward']['odds']

        for i, item in enumerate(gacha['basic_elements'], 1):
            specimen_id = item['specimen']
            mutant_name = self.mutant_names.get(specimen_id, specimen_id)
            star_text = f" ({star_names[item['stars']]})" if item['stars'] > 0 else ""

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            is_unlocked = specimen_id in status['unlocked_specimens']
            status_icon = "‚úÖ" if is_unlocked else "‚ùå"

            chance = (item['odds'] / total_odds) * 100
            info_text += f"{i}. {status_icon} {mutant_name}{star_text} - {chance:.2f}%\n"

        # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if gacha['completion_reward']:
            comp = gacha['completion_reward']
            specimen_id = comp['specimen']
            mutant_name = self.mutant_names.get(specimen_id, specimen_id)
            star_text = f" ({star_names[comp['stars']]})" if comp['stars'] > 0 else ""

            info_text += f"\nüèÜ –ù–ê–ì–†–ê–î–ê –ó–ê –ó–ê–í–ï–†–®–ï–ù–ò–ï:\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
            if completed:
                chance = (comp['odds'] / total_odds) * 100
                info_text += f"{mutant_name}{star_text} - {chance:.2f}%\n"
            else:
                info_text += f"{mutant_name}{star_text}\n"

        self.info_text.insert(tk.END, info_text)
        self.info_text.configure(state='disabled')

    def spin_gacha(self, gacha_id, use_type):
        """–ö—Ä—É—Ç–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É"""
        if gacha_id not in self.gacha_data:
            return None

        gacha = self.gacha_data[gacha_id]
        status = self.completion_status[gacha_id]
        was_completed_before = status['completed']
        completion_mutant = None

        # –ï—Å–ª–∏ –∫—Ä—É—Ç–∏–º –∑–∞ –∑–æ–ª–æ—Ç–æ - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
        if use_type == 'hc':
            basic_elements = gacha['basic_elements']

            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
            for item in basic_elements:
                if item['specimen'] not in status['unlocked_specimens']:
                    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —ç—Ç—É –Ω–∞–≥—Ä–∞–¥—É
                    status['unlocked_specimens'].add(item['specimen'])

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                    if len(status['unlocked_specimens']) == len(basic_elements):
                        status['completed'] = True
                        completion_mutant = item['specimen']  # –ú—É—Ç–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä

                    return item, completion_mutant

            # –ï—Å–ª–∏ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
            if not status['completed'] and len(status['unlocked_specimens']) == len(basic_elements):
                status['completed'] = True
                completion_mutant = "all_unlocked"  # –í—Å–µ —É–∂–µ –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã

            # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –º–æ–∂–µ–º –≤—ã–∏–≥—Ä–∞—Ç—å completion reward
            if status['completed'] and gacha['completion_reward']:
                return gacha['completion_reward'], completion_mutant

            # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –Ω–µ—Ç completion reward, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ—Å–Ω–æ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
            return random.choice(basic_elements), completion_mutant

        # –ï—Å–ª–∏ –∫—Ä—É—Ç–∏–º –∑–∞ –∂–µ—Ç–æ–Ω—ã - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å —É—á–µ—Ç–æ–º —à–∞–Ω—Å–æ–≤
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
            available_rewards = []
            weights = []

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
            for item in gacha['basic_elements']:
                available_rewards.append(item)
                weights.append(item['odds'])

            # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º completion reward
            if status['completed'] and gacha['completion_reward']:
                available_rewards.append(gacha['completion_reward'])
                weights.append(gacha['completion_reward']['odds'])

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
            total_weight = sum(weights)
            r = random.randint(1, total_weight)
            current_weight = 0

            for i, weight in enumerate(weights):
                current_weight += weight
                if current_weight >= r:
                    won_item = available_rewards[i]

                    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
                    if won_item in gacha['basic_elements'] and won_item['specimen'] not in status['unlocked_specimens']:
                        status['unlocked_specimens'].add(won_item['specimen'])

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                        if len(status['unlocked_specimens']) == len(gacha['basic_elements']):
                            status['completed'] = True
                            completion_mutant = won_item['specimen']  # –ú—É—Ç–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä

                    return won_item, completion_mutant

            return None, None

    def run_simulation(self, use_type):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–æ–∫"""
        gacha_id = self.get_current_gacha_id()
        if not gacha_id:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä!")
            return

        if gacha_id not in self.gacha_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        gacha = self.gacha_data[gacha_id]
        ru_name = gacha_names_ru.get(gacha_id, gacha_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
        if use_type == 'token':
            resource_amount = self.token_amount.get()
            cost_per_spin = gacha['token_cost']
            resource_name = "–∂–µ—Ç–æ–Ω–æ–≤"
        else:
            resource_amount = self.hc_amount.get()
            cost_per_spin = gacha['hc_cost']
            resource_name = "–∑–æ–ª–æ—Ç–∞"

        if resource_amount <= 0:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {resource_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∏—Ç –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω —Å–ø–∏–Ω
        if resource_amount < cost_per_spin:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                                 f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {resource_name}! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {cost_per_spin} {resource_name}.")
            return

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        self.spin_token_btn.configure(state='disabled')
        self.spin_hc_btn.configure(state='disabled')
        self.root.update()

        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤
            max_spins = resource_amount // cost_per_spin

            results_text = f"üöÄ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò: {ru_name}\n"
            results_text += f"–†–µ—Å—É—Ä—Å: {resource_amount} {resource_name}\n"
            results_text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∞: {cost_per_spin} {resource_name}\n"
            results_text += f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–∫—Ä—É—Ç–æ–≤: {max_spins}\n"
            results_text += "=" * 60 + "\n\n"

            self.update_results_display(results_text)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            session_stats = {
                'mutants_won': defaultdict(int),
                'resources_used': 0,
                'spins_done': 0,
                'completion_achieved': False,
                'completion_mutant': None
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç—ã
            remaining_resource = resource_amount
            spins_done = 0

            while remaining_resource >= cost_per_spin:
                # –¢—Ä–∞—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã
                remaining_resource -= cost_per_spin
                spins_done += 1

                if use_type == 'token':
                    self.total_tokens_spent += cost_per_spin
                else:
                    self.total_hc_spent += cost_per_spin

                self.total_spins += 1
                session_stats['resources_used'] += cost_per_spin
                session_stats['spins_done'] += 1

                # –ö—Ä—É—Ç–∏–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                won_item, completion_mutant = self.spin_gacha(gacha_id, use_type)

                if won_item:
                    specimen_id = won_item['specimen']
                    mutant_name = self.mutant_names.get(specimen_id, specimen_id)
                    star_text = f" ({star_names[won_item['stars']]})" if won_item['stars'] > 0 else ""

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
                    full_name = f"{mutant_name}{star_text}"
                    self.mutant_counts[full_name] += 1
                    session_stats['mutants_won'][full_name] += 1

                    self.win_history.append({
                        'gacha': ru_name,
                        'mutant': full_name,
                        'cost_type': use_type,
                        'cost_amount': cost_per_spin
                    })

                    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–æ
                    if completion_mutant:
                        session_stats['completion_achieved'] = True
                        if completion_mutant != "all_unlocked":
                            completion_mutant_name = self.mutant_names.get(completion_mutant, completion_mutant)
                            session_stats['completion_mutant'] = completion_mutant_name

                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
                            self.completion_history.append({
                                'gacha': ru_name,
                                'mutant': completion_mutant_name,
                                'cost_type': use_type
                            })

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤
                if spins_done % 10 == 0:
                    progress = f"–ü—Ä–æ–∫—Ä—É—á–µ–Ω–æ: {spins_done}/{max_spins} | –û—Å—Ç–∞–ª–æ—Å—å {resource_name}: {remaining_resource}"
                    self.update_results_display("", progress)
                    self.root.update()

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.update_results_display("", "")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏
            results_text = f"\n‚úÖ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n"
            results_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤: {spins_done}\n"
            results_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ {resource_name}: {session_stats['resources_used']}\n"
            results_text += f"–û—Å—Ç–∞–ª–æ—Å—å {resource_name}: {remaining_resource}\n\n"

            # –ï—Å–ª–∏ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ
            if session_stats['completion_achieved']:
                if session_stats['completion_mutant']:
                    results_text += f"üéâ –ì–ï–ù–ï–†–ê–¢–û–† –ó–ê–í–ï–†–®–ï–ù! –ü–æ—Å–ª–µ–¥–Ω–∏–π –º—É—Ç–∞–Ω—Ç: {session_stats['completion_mutant']}\n\n"
                else:
                    results_text += f"üéâ –ì–ï–ù–ï–†–ê–¢–û–† –ó–ê–í–ï–†–®–ï–ù! (–≤—Å–µ –º—É—Ç–∞–Ω—Ç—ã —É–∂–µ –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)\n\n"

            results_text += "üéÅ –í–´–ò–ì–†–ê–ù–ù–´–ï –ú–£–¢–ê–ù–¢–´:\n"
            results_text += "-" * 40 + "\n"

            if session_stats['mutants_won']:
                for mutant, count in sorted(session_stats['mutants_won'].items(),
                                            key=lambda x: x[1], reverse=True):
                    results_text += f"{mutant}: {count} —Ä–∞–∑\n"
            else:
                results_text += "–ù–µ –±—ã–ª–æ –≤—ã–∏–≥—Ä—ã—à–µ–π\n"

            self.results_text.insert(tk.END, results_text)
            self.results_text.see(tk.END)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
            self.update_stats_display()
            self.update_info_display()

        finally:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            self.spin_token_btn.configure(state='normal')
            self.spin_hc_btn.configure(state='normal')

    def update_results_display(self, initial_text, progress_text=""):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.results_text.configure(state='normal')

        if initial_text:
            self.results_text.delete(1.0, tk.END)
            self.results_text.insert(tk.END, initial_text)

        if progress_text:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            scroll_position = self.results_text.yview()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            content = self.results_text.get(1.0, tk.END)
            if "–ü—Ä–æ–∫—Ä—É—á–µ–Ω–æ:" in content:
                lines = content.split('\n')
                new_lines = []
                for line in lines:
                    if not line.startswith("–ü—Ä–æ–∫—Ä—É—á–µ–Ω–æ:"):
                        new_lines.append(line)
                self.results_text.delete(1.0, tk.END)
                self.results_text.insert(tk.END, '\n'.join(new_lines))

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.results_text.insert(tk.END, progress_text + "\n")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            self.results_text.yview_moveto(scroll_position[0])

        self.results_text.configure(state='disabled')

    def update_stats_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats_text.configure(state='normal')
        self.stats_text.delete(1.0, tk.END)

        stats_text = "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        stats_text += "=" * 50 + "\n\n"
        stats_text += f"–í—Å–µ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤: {self.total_spins}\n"
        stats_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∂–µ—Ç–æ–Ω–æ–≤: {self.total_tokens_spent}\n"
        stats_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–æ–ª–æ—Ç–∞: {self.total_hc_spent}\n\n"

        stats_text += "üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–£–¢–ê–ù–¢–ê–ú:\n"
        stats_text += "-" * 40 + "\n"

        if self.mutant_counts:
            sorted_mutants = sorted(self.mutant_counts.items(), key=lambda x: x[1], reverse=True)
            for mutant, count in sorted_mutants:
                stats_text += f"{mutant}: {count} —Ä–∞–∑\n"
        else:
            stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –º—É—Ç–∞–Ω—Ç–æ–≤\n"

        stats_text += "\nüèÜ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ì–ï–ù–ï–†–ê–¢–û–†–´:\n"
        stats_text += "-" * 40 + "\n"

        if self.completion_history:
            for completion in self.completion_history:
                cost_text = "–∂–µ—Ç–æ–Ω–æ–≤" if completion['cost_type'] == 'token' else "–∑–æ–ª–æ—Ç–∞"
                stats_text += f"{completion['gacha']}: –∑–∞–≤–µ—Ä—à–µ–Ω –º—É—Ç–∞–Ω—Ç–æ–º {completion['mutant']} (–∑–∞ {cost_text})\n"
        else:
            stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"

        stats_text += "\nüîÑ –ò–°–¢–û–†–ò–Ø –ü–û–°–õ–ï–î–ù–ò–• –í–´–ò–ì–†–´–®–ï–ô:\n"
        stats_text += "-" * 40 + "\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –≤—ã–∏–≥—Ä—ã—à–µ–π
        recent_wins = self.win_history[-20:] if len(self.win_history) > 20 else self.win_history
        for win in reversed(recent_wins):
            cost_text = "–∂–µ—Ç–æ–Ω–æ–≤" if win['cost_type'] == 'token' else "–∑–æ–ª–æ—Ç–∞"
            stats_text += f"{win['gacha']}: {win['mutant']} (–∑–∞ {win['cost_amount']} {cost_text})\n"

        self.stats_text.insert(tk.END, stats_text)
        self.stats_text.configure(state='disabled')

    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.total_spins = 0
        self.total_tokens_spent = 0
        self.total_hc_spent = 0
        self.win_history = []
        self.mutant_counts = defaultdict(int)
        self.resource_stats = defaultdict(lambda: defaultdict(int))
        self.completion_history = []

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        for gacha_id in self.gacha_data.keys():
            self.completion_status[gacha_id] = {
                'completed': False,
                'unlocked_specimens': set()
            }

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        self.results_text.configure(state='normal')
        self.results_text.delete(1.0, tk.END)
        self.results_text.configure(state='disabled')

        self.stats_text.configure(state='normal')
        self.stats_text.delete(1.0, tk.END)
        self.stats_text.configure(state='disabled')

        self.update_info_display()
        self.update_stats_display()


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = GachaSimulator(root)
    root.mainloop()