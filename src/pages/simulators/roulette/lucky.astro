---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import LuckyMachineSimulator from '../../../components/simulators/lucky/LuckyMachineSimulator.svelte';
import { luckyMachine, getRewardWithChance } from '../../../lib/lucky-machine';

const jackpotReward = luckyMachine.rewards.find((reward) => reward.isSuperJackpot) ?? null;
const freeSpinReward = luckyMachine.rewards.find((reward) => reward.isFreeTry) ?? null;
const jackpotChance = jackpotReward ? getRewardWithChance(jackpotReward, luckyMachine).chance : 0;
const freeSpinChance = freeSpinReward ? getRewardWithChance(freeSpinReward, luckyMachine).chance : 0;
---
<BaseLayout title="Lucky Slots — симулятор рулетки" fullWidth={true}>
  <section class="hero">
    <div class="hero-card">
      <span class="badge">Sim • Lucky Slots</span>
      <h1>Lucky Slots</h1>
      <p>
        Рулетка ресурсов. Используются оригинальные шансы из игры.
      </p>
      <dl class="quick-stats" aria-label="Основные параметры Lucky Slots">
        <div>
          <dt>Стоимость прокрута</dt>
          <dd>1 жетон джекпота</dd>
        </div>
        <div>
          <dt>Количество призов</dt>
          <dd>{luckyMachine.rewards.length}</dd>
        </div>
        <div>
          <dt>Шанс бесплатного спина</dt>
          <dd>{(freeSpinChance * 100).toFixed(2)}%</dd>
        </div>
        <div>
          <dt>Шанс джекпота</dt>
          <dd>{(jackpotChance * 100).toFixed(4)}%</dd>
        </div>
      </dl>
    </div>
  </section>

  <LuckyMachineSimulator client:load machine={luckyMachine} />
</BaseLayout>

<style>
  .hero {
    margin-bottom: 2.75rem;
  }

  .hero-card {
    position: relative;
    padding: 2.9rem;
    border-radius: 42px;
    background: radial-gradient(circle at 18% 20%, rgba(124, 77, 255, 0.32), rgba(15, 23, 42, 0.92));
    border: 1px solid rgba(129, 140, 248, 0.35);
    box-shadow: 0 28px 46px rgba(99, 102, 241, 0.22);
    overflow: hidden;
  }

  .hero-card::after {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at 85% 10%, rgba(236, 233, 254, 0.16), transparent 55%);
    pointer-events: none;
    mix-blend-mode: screen;
  }

  .badge {
    display: inline-flex;
    align-items: center;
    gap: 0.45rem;
    padding: 0.48rem 1.2rem;
    border-radius: 999px;
    background: rgba(124, 77, 255, 0.25);
    color: #d0c2ff;
    font-size: 0.82rem;
    letter-spacing: 0.08em;
    text-transform: uppercase;
  }

  h1 {
    margin: 1.1rem 0 0.75rem;
    font-size: 3.1rem;
    color: #e0e7ff;
  }

  p {
    margin: 0;
    max-width: 680px;
    color: rgba(226, 232, 240, 0.78);
    font-size: 1.08rem;
    line-height: 1.85;
  }

  .quick-stats {
    margin: 2.3rem 0 0;
    display: grid;
    gap: 1.6rem;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }

  dt {
    margin: 0 0 0.45rem;
    font-size: 0.78rem;
    text-transform: uppercase;
    letter-spacing: 0.08em;
    color: rgba(165, 180, 252, 0.75);
  }

  dd {
    margin: 0;
    font-size: 1.45rem;
    color: #f4f4ff;
    font-weight: 600;
  }

  @media (max-width: 720px) {
    .hero-card {
      padding: 2.2rem;
      border-radius: 32px;
    }

    h1 {
      font-size: 2.5rem;
    }
  }
</style>
