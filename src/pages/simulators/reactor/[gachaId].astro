---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import ReactorSimulator from '../../../components/simulators/reactor/ReactorSimulator.svelte';
import { getGachaMeta, listGachas } from '../../../lib/reactor-gacha';
import { getMutantTexture, getSkinTextures } from '../../../lib/mutant-textures';

interface Props {
  gacha: ReturnType<typeof getGachaMeta> extends infer T ? Exclude<T, null> : never;
  baseTextures: Record<string, string | null>;
  completionTexture: string | null;
}

export function getStaticPaths() {
  return listGachas().map((gacha) => {
    const baseIds = gacha.basic_elements.map((reward) => reward.specimen);
    const baseTextures = getSkinTextures(baseIds);
    const completionTexture = gacha.completion_reward
      ? getMutantTexture(gacha.completion_reward.specimen)
      : null;

    return {
      params: { gachaId: gacha.id },
      props: { gacha, baseTextures, completionTexture },
    };
  });
}

const { gacha, baseTextures, completionTexture } = Astro.props as Props;
---
<BaseLayout title={`Реактор — ${gacha.name}`} fullWidth>
  <a class="back-link" href="/simulators/reactor">← Назад к выбору генератора</a>
  <ReactorSimulator
    client:load
    gachaId={gacha.id}
    gacha={gacha}
    baseTextures={baseTextures}
    completionTexture={completionTexture}
  />
</BaseLayout>

<style>
  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    margin-bottom: 1.5rem;
    color: #93c5fd;
    text-decoration: none;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 0.08em;
  }

  .back-link:hover {
    text-decoration: underline;
  }
</style>
