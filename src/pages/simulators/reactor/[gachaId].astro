---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import ReactorSimulator from '../../../components/simulators/reactor/ReactorSimulator.svelte';
import { getGachaMeta, listGachas } from '../../../lib/reactor-gacha';
import { getSpecimenTexture } from '../../../lib/mutant-textures';

interface Props {
  gacha: ReturnType<typeof getGachaMeta> extends infer T ? Exclude<T, null> : never;
  textures: Record<string, string | null>;
}

export function getStaticPaths() {
  return listGachas().map((gacha) => {
    const textures: Record<string, string | null> = {};
    for (const reward of gacha.basic_elements) {
      textures[reward.specimen] = getSpecimenTexture(reward.specimen);
    }
    if (gacha.completion_reward) {
      textures[gacha.completion_reward.specimen] = getSpecimenTexture(
        gacha.completion_reward.specimen,
      );
    }

    return {
      params: { gachaId: gacha.id },
      props: { gacha, textures },
    };
  });
}

const { gacha, textures } = Astro.props as Props;
---
<BaseLayout title={`Реактор — ${gacha.name}`}>
  <a class="back-link" href="/simulators/reactor">← Назад к выбору генератора</a>
  <ReactorSimulator client:load gachaId={gacha.id} gacha={gacha} textures={textures} />
</BaseLayout>

<style>
  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    margin-bottom: 1.5rem;
    color: #93c5fd;
    text-decoration: none;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 0.08em;
  }

  .back-link:hover {
    text-decoration: underline;
  }
</style>
